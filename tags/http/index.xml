<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>http on 世界的中心</title>
    <link>https://sonemiyuki.cn/tags/http/</link>
    <description>Recent content in http on 世界的中心</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-US</language>
    <copyright>All rights reserved - 2021-</copyright>
    <lastBuildDate>Sun, 11 Jul 2021 23:41:30 +0800</lastBuildDate><atom:link href="https://sonemiyuki.cn/tags/http/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>计算机网络面经与常见QA（2）</title>
      <link>https://sonemiyuki.cn/post/2021/07/11/network/</link>
      <pubDate>Sun, 11 Jul 2021 23:41:30 +0800</pubDate>
      
      <guid>https://sonemiyuki.cn/post/2021/07/11/network/</guid>
      <description>各层的报文格式   以太网帧  目标MAC地址（6B） 源MAC地址（6B） 类型（2B） 数据（46-1500B） FCS（4B）   IP数据报  版本（4bit） header长度（4bit），以32bit为单位 服务类型（8bit） 总长度（16bit） 上层协议标识（16bit）标记上层协议 标志：（3bit）用来表示是否有分片，是否允许分片等 片偏移量（13bit）以8bit为单位的片偏移量 生存时间（8bit）跳数限制，若TTL为0，则丢弃这个数据包 协议（8bit） 校验和（16bit）检验首部的校验和 源地址（32bit） 目的地址（32bit）   UDP数据报  源端口（16bit） 目的端口（16bit） UDP长度（16bit） UDP校验和（16bit） 伪首部：前缀源IP（4B），目的IP（4B），0（1B），17（1B），UPD长度（2B），以16个bit为单位，按位加法，然后取反。   TCP数据报  源端口（16bit） 目的端口（16bit） 数据序号seq（16bit） 确认序号ack（16bit） 偏移量（4bit） 保留（6bit） 六个标志位（6bit）  URG：紧急指针字段有效，尽快传输 ACK：设定ack字段有效 PSH：尽快将报文传给应用层 RST：要求重建TCP SYN：设定syn字段有效 FIN：表示传输结束，请求释放连接   窗口字段（16bit） 校验和（16bit） 紧急指针（16bit）     建立TCP/UDP连接的调用   路由协议
   RIP(Routing Information Protocol)路由信息协议  距离向量型的一种路由协议 30s一次,对全网广播,等待5次,将已知路由进行广播,然后下一跳继续广播,进行逐步传播   OSPF(Open Shortest Path First)开放最短路径优先  基于IP 适用泛洪法发送请求 发送信息是路由器临近的所有路由器的链路状态 链路状态变化才发送信息 Dijkstra 收敛快 划分自治系统 问候、数据库描述、链路状态请求、链路状态更新、链路状态确认   BGP(Border Gateway Protrol)边界网关协议  寻求一条能到达目的地并且比较好的路由 BGP发言人    等待2MSL的原因   保证客户端发送的最后一个ACK报文能够到达服务器。 新的连接中不会出现旧连接的请求报文。  TCP的可靠性   校验和 序列号 确认应答 超时重传  超时重传基于两个可能的原因  发送过去的包全体丢包,接到这个包之后接收方没有收到 接受的ACK报文丢包,接收方发现数据存在,仍然发送ACK应答   动态计算最大超时时间   连接管理  三次握手,四次挥手确保可靠的连接   流量管理  滑动窗口大小的内容实际上是接收端数据缓冲区的剩余大小。接收端会在确认应答发送ACK报文时，将自己的即时窗口大小填入，并跟随ACK报文一起发送过去。而发送方根据ACK报文里的窗口大小的值的改变进而改变自己的发送速度。如果接收到窗口大小的值为0，那么发送方将停止发送数据。并定期的向接收端发送窗口探测数据段，让接收端把窗口大小告诉发送端。   拥塞控制  慢启动:少量数据探路,拥塞窗口指数增长 增长过阈值之后线性增长 拥塞之后慢启动的阈值变为原来的一半,拥塞窗口重置为 1    糊涂窗口综合征    当TCP中发送端发送数据很慢或者接收端接收缓冲数据很慢,就会使得应用进程的有效载荷很小。</description>
    </item>
    
    <item>
      <title>Jmeter(1)</title>
      <link>https://sonemiyuki.cn/post/2021/07/11/get-post/</link>
      <pubDate>Sun, 11 Jul 2021 11:29:30 +0800</pubDate>
      
      <guid>https://sonemiyuki.cn/post/2021/07/11/get-post/</guid>
      <description>Jmeter Jmeter脚本生成
 借助第三方工具录制  badboy 被淘汰 blazemeter 大陆无法注册账号   使用自带的http代理服务器方式生成  添加线程&amp;ndash;线程组 添加配置元件&amp;ndash;cookie管理器 添加非测试元件&amp;ndash;http代理服务器 配置http代理服务器并启动  端口：用户指定，和服务器无关 目标控制器： Type：有时候需要选Java   在客户端进行设置，使客户端请求通过代理。  Internet选项-连接-局域网设置     抓包手写  Jmeter代理服务器
 转发 翻译  </description>
    </item>
    
    <item>
      <title>计算机网络面经与常见QA（1）</title>
      <link>https://sonemiyuki.cn/post/2021/07/08/network/</link>
      <pubDate>Thu, 08 Jul 2021 23:41:30 +0800</pubDate>
      
      <guid>https://sonemiyuki.cn/post/2021/07/08/network/</guid>
      <description>计算机网络面经与常见QA（1）  5层协议、7层协议、4层协议与主要协议   7层协议：  应用层：FTP、DNS、SMTP、HTTP、WWW、NFS 表示层：JPEG、MPEG、ASII 会话层：RPC、SQL、NFS 传输层：TCP、UDP 网络层：IP、ACMP、ARP、RARP、OSPF、IPX、RIP 链路层：PPP、MAC、VLAN 物理层：RJ45、CLOCK、IEEE802.3   5层协议：  将7层协议的顶部三层合并为应用层   4层协议:  将底下两层合并为数据接口层    IP地址的分类   A类:以0开头,第一个字节为0-127 B类:以10开头,第一个字节为128-191 C类:以110开头,第一个字节为192-223 D类:以1110开头,用于多播 E类:以1111开头,暂时保留 特殊IP地址:  0.0.0.0 缺省路由,表示不清楚的主机和目的网络 255.255.255.255 路由器不转发的内网广播 127.0.0.1 localhost,本机 224.0.0.1 组播地址 192.168.X.X 私有地址     IP地址,子网掩码,主机号码的关系
  ARP(Address Resolution Protrol)地址解析协议
  概述：根据IP协议获取物理地址的TCP/IP协议
 在主机中维护ARP cache，里面有本局域网的主机和路由器的（ip地址，硬件地址）映射表。 当主机A向局域网上的另外一台主机B发送IP数据报的时候，在其ARP高速缓存里面查询有无主机B的IP地址  若有，查出硬件地址并且写入mac帧，通过局域网将帧发往该硬件地址。 若无，则主机A运行ARP，根据以下步骤找出主机B的硬件地址：  ARP进程向局域网内广播发送ARP请求分组，局域网内所有主机运行的ARP进程均收到此分组。在这里是广播 主机B的IP地址和ARP请求分组待查的IP一直，收下这个ARP请求分组，并且向A发送ARP响应分组，在这个响应分组中写进自己的硬件地址。在这里是单播。 主机A在收到ARP响应分组之后在其ARP cache中写入主机B的（IP地址，物理地址映射）     ARP的特点：  每个数据项都有生存时间 解决的主要是局域网上的问题 广域网上联系需要交给路由器转发    各种需要了解的小协议   ICMP（Internet Control Message Protrol）  主要用于IP主机和路由器之间传递控制信息 类型-代码-校验和  3-终点不可达：不能交付数据包 11-时间超过：路由器接收到生存时间为0的数据报，丢弃并向原点发送报文 12-参数问题：路由器或者主机收到的数据包首部有的字段的值不正确 5-改变路由：提示主机进行重定向 8、0-回送或回答：ICMP回送请求报文由主机或者路由器向特定的主机发布询问 13、14-时间戳请求或回答：用于校正时间戳     FTP（File Transfer Protrol）文件传输协议  文件传输协议 主动模式：  控制连接：会话期间一直打开，用于控制和会话，端口号21 数据连接：用来传输数据，服务机端口号20，客户机端口号自行开放，发送PORT命令从服务器获取数据   被动模式：  控制连接：会话期间一直打开，用于控制和会话，端口号21 数据连接：用来传输数据，服务器随机开放端口，客户端再连接到服务器开放的端口进行数据传输   主动模式和被动模式的不同简单概述为： 主动模式传送数据时是“服务器”连接到“客户端”的端口；被动模式传送数据是“客户端”连接到“服务器”的端口。主动模式需要客户端必须开放端口给服务器，很多客户端都是在防火墙内，开放端口给FTP服务器访问比较困难。被动模式只需要服务器端开放端口给客户端连接就行了。   HTTP（Hyper Text Transfer Protocol）超文本传输协议  Port: 80 运用TCP保证了数据的可靠运输，但是HTTP本身没有连接，没有状态。 文件传输时间+2RTT HTTP1.</description>
    </item>
    
    <item>
      <title>GET与POST探秘</title>
      <link>https://sonemiyuki.cn/post/2021/05/09/get-post/</link>
      <pubDate>Sun, 09 May 2021 22:29:30 +0800</pubDate>
      
      <guid>https://sonemiyuki.cn/post/2021/05/09/get-post/</guid>
      <description>从HTTP GET和POST的整理生发出来的 幂等性(Idempotence)
 Methods can also have the property of &amp;ldquo;idempotence&amp;rdquo; in that (aside from error or expiration issues) the side-effects of N &amp;gt; 0 identical requests is the same as for a single request.
 幂等性在HTTP1.1中的定义如上，可以大致理解为一次和多次请求某一个资源应该具有同样的副作用。 这是一个语义范畴的概念，换言之主要是由设计API、协议或者应用的人去保证的。幂等性是分布式系统设计中十分重要的概念，而HTTP的分布式本质也决定了它在HTTP中具有重要地位。
毋庸置疑，HTTP在当前的分布式系统中有重要的地位，幂等性也融入了设计理念之中。让我们考虑一个例子来说明幂等性在实际业务中的作用。 我们假设有如下函数帮助模拟业务：从某个id为account_id的账户里面扣数量为amount的钱。
bool withdraw(account_id, amount)在一个分布式系统里面，如果单纯用HTTP协议，我们不能很显然地假定系统的可靠性，那么，这时候我们假设A让B去扣钱，有可能产生几种情况：
 A说：B，请去某账户扣钱。 B完成了指令。 B对A说：我扣完了，返回你一个True，A收到了。 A说：B，请去某账户扣钱。 B完成了指令。 B对A说：由于余额等原因无法扣款，返回你一个False，A收到了。 事情往往不尽如人意，因为消息传递出现了两次，如果丢包了，有可能出现以下情况：   A说：B，请去某账户扣钱。 B没听到。 A说：B，请去某账户扣钱。 B完成了指令。B对A说：我扣完了，返回你一个True，A没收到 A说：B，请去某账户扣钱。 B完成了指令。B对A说：由于余额等原因无法扣款，返回你一个False，A没收到  从A的角度来看，如果迟迟没有收到Reply，有可能出现这三种情况之一，但是在目前设计下A无法通过已有的信息进行判断是三种情况的哪一种，也就无法确定是要叫B重新付款，还是返回付款成功，或者返回付款失败。
我们可以引进中间件完成这个业务，但是这在架构上会增加和中间件的耦合程度。从设计的角度说，有一种被称作幂等设计的设计思路被用来解决类似的问题。
int create_ticket() bool idempotent_withdraw(ticket_id, account_id, amount)A对B说，我要找你有一件事。B说，好的，你找我的事情我编号为5。A说，好的，5号事情是如此如此。B办完了，对A说，办完了。A返回。 在这样一个过程中，取号的过程损失很小，如果取号过程丢包了，只要重新取一个号码就可以了。但是当A收到取回的号码，这时候B就知道有一件事情要办。在这个假设下，B最多只会把这件特定的事情办一次成为AB之间的Common Sense。如果丢包导致A没有返回，A可以在调用上加上原来的ID，并且持续发送，因为B只会把这件事情办一次，所以可以持续发送，等待返回。</description>
    </item>
    
  </channel>
</rss>
