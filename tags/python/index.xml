<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Python on 世界的中心</title>
    <link>sonemiyuki.cn/tags/python/</link>
    <description>Recent content in Python on 世界的中心</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-US</language>
    <copyright>All rights reserved - 2021-</copyright>
    <lastBuildDate>Thu, 06 May 2021 10:54:24 +0800</lastBuildDate><atom:link href="sonemiyuki.cn/tags/python/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Python 3单元测试unittest及HTML报告生成速成</title>
      <link>sonemiyuki.cn/post/2021/05/06/py3unittest/</link>
      <pubDate>Thu, 06 May 2021 10:54:24 +0800</pubDate>
      
      <guid>sonemiyuki.cn/post/2021/05/06/py3unittest/</guid>
      <description>Python3单元测试unittest及HTML报告生成速成 前置知识：
 Python面向对象基本 单元测试基本知识 Junit等其他测试框架关于测试类、测试方法、测试套件等基本构件的知识  我们先定义一个待测试的类和对象 code.py
class algor: def add(a, b): return a + b 然后开一个测试文件
from code import algor import unittest # 下述文件是从py2拿过来的，需要改造。改造方法在后面 import HTMLTestRunner 编写测试类：
class TestAlgor1(unittest.TestCase): @classmethod # 类前执行 def setUpClass(self): print(&amp;#34;setUpClass&amp;#34;) # 类后执行 @classmethod def tearDownClass(self): print(&amp;#34;tearDownClass&amp;#34;) # 方法前执行 def setUp(self): print(&amp;#34;setUp&amp;#34;) # 方法后执行 def tearDown(self): print(&amp;#34;tearDown&amp;#34;) # 测试方法，一般命名为测试某某某类 def testAdd1(self): self.assertEquals(algor.add(1, 3), 4) def testAdd2(self): self.assertEquals(algor.add(114, 514), 628) 主函数：构建测试套件和生成报告：
if __name__ == &amp;#39;__main__&amp;#39;: suite = unittest.</description>
    </item>
    
  </channel>
</rss>
