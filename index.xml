<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>世界的中心</title>
    <link>https://sonemiyuki.cn/</link>
    <description>Recent content on 世界的中心</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-US</language>
    <copyright>All rights reserved - 2021-</copyright>
    <lastBuildDate>Mon, 12 Jul 2021 19:30:30 +0800</lastBuildDate><atom:link href="https://sonemiyuki.cn/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>操作系统(3)</title>
      <link>https://sonemiyuki.cn/post/2021/07/12/get-post/</link>
      <pubDate>Mon, 12 Jul 2021 19:30:30 +0800</pubDate>
      
      <guid>https://sonemiyuki.cn/post/2021/07/12/get-post/</guid>
      <description>单处理器调度  长程调度  新建 销毁   中程调度  换入 换出   短程调度  时钟中断 IO中断 系统调用 信号    长程调度决定了那个程序可以进入系统中被处理
进程越多，每个进程时间越少，调度代价越大。
短程调度算法
 周转时间 响应时间 最后期限 可预测性  短程调度考虑性能指标
 吞吐量 处理器使用率  考虑其他因素
 公平性 优先级 平衡资源  优先级：每个进程有一个优先级，选择优先级高的进程。多个优先级，多个就绪队列，低优先级的有可能饥饿，因此优先级是动态改变的。
选择函数：确定在就绪进程中选择哪个进程在下一次执行
决策模式（Decision Mode）
 非抢占 抢占  进程周转时间 = 结束 - 到达 = 等待 + 服务
归一化周转时间 = 周转时间 / 服务时间
调度算法：
 FCFS 轮转 SPN（最短优先） SRT（最短剩余时间） HRRN（最高响应比）  IO管理与磁盘调度 IO设备的三种类别</description>
    </item>
    
    <item>
      <title>操作系统(2)</title>
      <link>https://sonemiyuki.cn/post/2021/07/12/get-post/</link>
      <pubDate>Mon, 12 Jul 2021 19:29:30 +0800</pubDate>
      
      <guid>https://sonemiyuki.cn/post/2021/07/12/get-post/</guid>
      <description>进程与线程 进程：
 资源所有权 调度/执行  多线程OS：
支持在一个进程中执行多个线程的能力
资源分配和保护的单位
线程具有
 线程状态 线程上下文（寄存器，计数器） 执行栈 静态存储空间  多线程的优点：
创建代价小，销毁代价小，切换代价小，通信代价小。
线程的基本操作：
 派生 阻塞 解除阻塞 结束  RPC：
 单线程 多线程  纯用户级线程：
优点：
 不需要模式转换 调度算法是应用程序专用的 可以在任意OS中运行  缺点：
 系统调用引发线程组所有线程都被阻塞 无法利用多处理器技术  纯内核级线程：
优点：
 内核可以调度同一个进程的多个线程再多个处理器上同时运行 线程阻塞不会引起同一进程内其余线程的阻塞 内核例程本身可以使用多线程  缺点：
 线程的大量模式切换  组合方法 ＝用户级线程＋内核级线程 线程在用户空间中创建 线程的调度和同步也在应用程序中进行
内存管理  重定位 保护 共享 逻辑组织  模块可以单独编写和编译 可以执行模块级别的保护 可以在进程间共享模块   物理组织  内存分区</description>
    </item>
    
    <item>
      <title>Java集合类数据结构</title>
      <link>https://sonemiyuki.cn/post/2021/07/12/java/</link>
      <pubDate>Mon, 12 Jul 2021 16:29:30 +0800</pubDate>
      
      <guid>https://sonemiyuki.cn/post/2021/07/12/java/</guid>
      <description>Collection Collection提供了一系列接口给集合实现。
Iterator Iterator：用于遍历集合的对象，本身是同名设计模式的体现。
AbstractList AbstractList的算法是基于内部Iterator遍历实现的，用一个cursor和size()函数控制迭代的数量
Spliterator Spliterator是Java 8中加入的一个新接口；这个名字代表“可拆分迭代器”（splitable iterator）。和Iterator一样，Spliterator也用于遍历数据源中的元素，但它是为了并行执行而设计的。Java 8已经为集合框架中包含的所有数据结构提供了一个默认的Spliterator实现。集合实现了Spliterator接口，接口提供了一个spliterator方法。
Spliterator可以单独遍历元素（tryAdvance()）或批量顺序遍历元素（forEachRemaining()）。Spliterator还可以将它的一些元素（使用trySplit()）进行分区作为另一个Spliterator，以用于可能并行的操作。使用无法拆分的Spliterator或以高度不平衡或低效的方式进行操作不太可能从并行性中受益。遍历和拆分至用完元素;每个Spliterator仅对单个批量计算有用。
这个就是用来多线程并行迭代的迭代器，这个迭代器的主要作用就是把集合分成了好几段，每个线程执行一段，因此是线程安全的。
//如果存在剩余元素，则对其执行给定操作，返回true；否则返回false。如果此Spliterator为ORDERED，则会对遇见顺序中的下一个元素执行操作。操作抛出的异常会转发给调用者。 boolean tryAdvance(Consumer&amp;lt;? super T&amp;gt; action); //按顺序对每个剩余元素执行给定操作，直到所有元素都已处理或操作抛出异常为止。如果此Spliterator为ORDERED，则会按遇见顺序执行操作。操作抛出的异常会转发给调用者。默认方法调用tryAdvance方法 default void forEachRemaining(Consumer&amp;lt;? super T&amp;gt; action) { do { } while (tryAdvance(action)); } //对任务分割，返回一个新的Spliterator迭代器 Spliterator&amp;lt;T&amp;gt; trySplit(); //用于估算还剩下多少个元素需要遍历 long estimateSize(); //当迭代器拥有SIZED特征时，返回剩余元素个数；否则返回-1 default long getExactSizeIfKnown() { return (characteristics() &amp;amp; SIZED) == 0 ? -1L : estimateSize(); } //返回当前对象有哪些特征值 int characteristics(); //是否具有当前特征值 default boolean hasCharacteristics(int characteristics) { return (characteristics() &amp;amp; characteristics) == characteristics; } //如果Spliterator的list是通过Comparator排序的，则返回Comparator //如果Spliterator的list是自然排序的 ，则返回null //其他情况下抛错 default Comparator&amp;lt;?</description>
    </item>
    
    <item>
      <title>计算机网络面经与常见QA（2）</title>
      <link>https://sonemiyuki.cn/post/2021/07/11/network/</link>
      <pubDate>Sun, 11 Jul 2021 23:41:30 +0800</pubDate>
      
      <guid>https://sonemiyuki.cn/post/2021/07/11/network/</guid>
      <description>各层的报文格式   以太网帧  目标MAC地址（6B） 源MAC地址（6B） 类型（2B） 数据（46-1500B） FCS（4B）   IP数据报  版本（4bit） header长度（4bit），以32bit为单位 服务类型（8bit） 总长度（16bit） 上层协议标识（16bit）标记上层协议 标志：（3bit）用来表示是否有分片，是否允许分片等 片偏移量（13bit）以8bit为单位的片偏移量 生存时间（8bit）跳数限制，若TTL为0，则丢弃这个数据包 协议（8bit） 校验和（16bit）检验首部的校验和 源地址（32bit） 目的地址（32bit）   UDP数据报  源端口（16bit） 目的端口（16bit） UDP长度（16bit） UDP校验和（16bit） 伪首部：前缀源IP（4B），目的IP（4B），0（1B），17（1B），UPD长度（2B），以16个bit为单位，按位加法，然后取反。   TCP数据报  源端口（16bit） 目的端口（16bit） 数据序号seq（16bit） 确认序号ack（16bit） 偏移量（4bit） 保留（6bit） 六个标志位（6bit）  URG：紧急指针字段有效，尽快传输 ACK：设定ack字段有效 PSH：尽快将报文传给应用层 RST：要求重建TCP SYN：设定syn字段有效 FIN：表示传输结束，请求释放连接   窗口字段（16bit） 校验和（16bit） 紧急指针（16bit）     建立TCP/UDP连接的调用   路由协议
   RIP(Routing Information Protocol)路由信息协议  距离向量型的一种路由协议 30s一次,对全网广播,等待5次,将已知路由进行广播,然后下一跳继续广播,进行逐步传播   OSPF(Open Shortest Path First)开放最短路径优先  基于IP 适用泛洪法发送请求 发送信息是路由器临近的所有路由器的链路状态 链路状态变化才发送信息 Dijkstra 收敛快 划分自治系统 问候、数据库描述、链路状态请求、链路状态更新、链路状态确认   BGP(Border Gateway Protrol)边界网关协议  寻求一条能到达目的地并且比较好的路由 BGP发言人    等待2MSL的原因   保证客户端发送的最后一个ACK报文能够到达服务器。 新的连接中不会出现旧连接的请求报文。  TCP的可靠性   校验和 序列号 确认应答 超时重传  超时重传基于两个可能的原因  发送过去的包全体丢包,接到这个包之后接收方没有收到 接受的ACK报文丢包,接收方发现数据存在,仍然发送ACK应答   动态计算最大超时时间   连接管理  三次握手,四次挥手确保可靠的连接   流量管理  滑动窗口大小的内容实际上是接收端数据缓冲区的剩余大小。接收端会在确认应答发送ACK报文时，将自己的即时窗口大小填入，并跟随ACK报文一起发送过去。而发送方根据ACK报文里的窗口大小的值的改变进而改变自己的发送速度。如果接收到窗口大小的值为0，那么发送方将停止发送数据。并定期的向接收端发送窗口探测数据段，让接收端把窗口大小告诉发送端。   拥塞控制  慢启动:少量数据探路,拥塞窗口指数增长 增长过阈值之后线性增长 拥塞之后慢启动的阈值变为原来的一半,拥塞窗口重置为 1    糊涂窗口综合征    当TCP中发送端发送数据很慢或者接收端接收缓冲数据很慢,就会使得应用进程的有效载荷很小。</description>
    </item>
    
    <item>
      <title>Java面经后端</title>
      <link>https://sonemiyuki.cn/post/2021/07/11/java/</link>
      <pubDate>Sun, 11 Jul 2021 22:29:30 +0800</pubDate>
      
      <guid>https://sonemiyuki.cn/post/2021/07/11/java/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Java面经基础（含OO）</title>
      <link>https://sonemiyuki.cn/post/2021/07/11/java/</link>
      <pubDate>Sun, 11 Jul 2021 22:29:30 +0800</pubDate>
      
      <guid>https://sonemiyuki.cn/post/2021/07/11/java/</guid>
      <description>OO的优点和三个特性 优点：基于面向过程，易于复用，易于理解，可扩展，可维护
 封装  外部不关心也无法修改内部实现   继承  继承基类的方法并做出改变   多态  同一个方法，不同的实现    Java编译过程  编译：创建完源文件之后，程序先要被JVM中的java编译器进行编译为.class文件。java编译一个类时，如果这个类所依赖的类还没有被编译，编译器会自动的先编译这个所依赖的类，然后引用。 编译后的字节码文件格式主要分为两部分：常量池和方法字节码。常量池记录的是代码出现过的字面量（文本字符串、八种基本类型的值、被声明为final的常量等）以及符号引用（类和方法的全限定名、字段的名称和描述符、方法的名称和描述符）方法字节码中放的是各个方法的字节码（依赖操作数栈和局部变量表，由JVM解释执行） 经过JVM的解释运行 加载 &amp;ndash;&amp;gt; 验证 &amp;ndash;&amp;gt; 准备 &amp;ndash;&amp;gt; 解析 &amp;ndash;&amp;gt; 初始化（其中验证、准备、解析统称为类的连接）  JDK JVM JRE 注意JRE包含bin和lib，bin是JVM虚拟机，lib是映射到不同操作系统所需要的库。
== 和 equals == 比较的是栈里面的值，基础数据类型比较基础数据类型，对象比较地址
equals默认用==进行比较 String的equals重写将另一个对象强转String
final final的作用
 修饰类：类不能被继承 修饰方法：可以重载不能重写 修饰变量：常变量，不能更改值 修饰类变量：声明，非静态初始化块，构造器 类变量：静态初始化块，声明 作用在栈上，基础变量不能改，引用的值可变  为什么局部内部类和匿名内部类只能访问局部final类型的变量 编译生成class文件，内部类的class文件会独立出来。外部类方法结束局部变量销毁，但是内部类如果还在执行就会出问题。将局部变量复制作为内部类的成员变量，延长其生命周期。
final是某种保持一致性的妥协
重载和重写 重载： 同一个类、方法名相同，参数名（类型、个数、顺序）不同，返回值修饰符可以不同；
重写：父子类中，方法名参数名必须相同，返回值范围和抛出异常值范围小于等于父类，修饰符范围大于等于父类，无法重写父类private方法。
接口和抽象类  抽象类可以有普通成员函数，接口的方法必须全部抽象 抽象类成员变量类型比较宽，看接口的成员变量必须是public static final 抽象类单继承，可以通过接口实现多继承  接口：对类的行为进行约束，约定了一定要有某个方法。like-a。</description>
    </item>
    
    <item>
      <title>Java面经集合</title>
      <link>https://sonemiyuki.cn/post/2021/07/11/java/</link>
      <pubDate>Sun, 11 Jul 2021 22:29:30 +0800</pubDate>
      
      <guid>https://sonemiyuki.cn/post/2021/07/11/java/</guid>
      <description>String、StringBuilder、StringBuffer String：final修饰，不可变，每次操作产生新对象，浪费时间空间
StringBuffer和StringBuilder在原对象进行操作。StringBuffer的所有方法都是synchronize方法修饰的。
性能 Builder &amp;gt; Buffer &amp;gt; String
场景：改变字符串内容 优先StringBuilder，多线程使用StringBuffer。
List 和 Set List： 有序，可重复，允许多个null，可以用迭代器也可以用get方法访问元素
Set：无序，不可重复，最多允许一个null，只能用迭代器遍历。
HashSet底层是使用HashMap实现的。当使用add方法将对象添加到Set当中时，实际上是将该对象作为底层所维护的Map对象的key，而value则都是同一个Object对象（该对象我们用不上）；其他的都是通过定义的HashMap对象实现的。
ArrayList 和 LinkedList ArrayList：本质上基于数组，适合下标访问，具有1.5倍扩容机制，尾插法移动少，性能提高好。
LinkedList：本质上基于链表时适合插入删除，不适合查询，必须用iterator遍历，否则时间复杂度过大。indexOf会遍历整个链表。
HashMap 和 HashTable HashTable线程安全，所有方法synchronized修饰。HashMap允许null的key和value。
底层实现：数组+链表 数组：二次hash之后映射到一个数组上面那如果未冲突则直接存Node进去，如果冲突，equals判断，相同则取代钙元素，否则判断链表高度，链表高度达到8转为红黑树，低于6则转回链表。
HashMap扩容 capacity 即容量，默认16。loadFactor 加载因子，默认是0.75threshold 阈值。阈值=容量*加载因子。默认12。当元素数量超过阈值时便会触发扩容。
当元素数量超过阈值时便会触发扩容。每次扩容的容量都是之前容量的2倍。
HashMap的容量变化通常存在以下几种情况： 空参数的构造函数：实例化的HashMap默认内部数组是null，即没有实例化。第一次调用put方法时，则会开始第一次初始化扩容，长度为16。有参构造函数：用于指定容量。会根据指定的正整数找到不小于指定容量的2的幂数，将这个数设置赋值给阈值（threshold）。第一次调用put方法时，会将阈值赋值给容量，然后让 阈值 = 容量 * 负载因子 。（因此并不是我们手动指定了容量就一定不会触发扩容，超过阈值后一样会扩容！！）如果不是第一次扩容，则容量变为原来的2倍，阈值也变为原来的2倍。（容量和阈值都变为原来的2倍时，负载因子还是不变）
由于数组的容量是以2的幂次方扩容的，那么一个Entity在扩容时，新的位置要么在原位置，要么在原长度+原位置的位置。数组长度变为原来的2倍，表现在二进制上就是多了一个高位参与数组下标确定。此时，一个元素通过hash转换坐标的方法计算后，恰好出现一个现象：最高位是0则坐标不变，最高位是1则坐标变为“原长度+原坐标”。在扩容时，不需要重新计算元素的hash了，只需要判断最高位是1还是0就好了。
参考链接： java中Map和Set的底层分析 HashMap扩容机制 Java集合类 Spliterator 1 Spliterator 2</description>
    </item>
    
    <item>
      <title>操作系统(1)</title>
      <link>https://sonemiyuki.cn/post/2021/07/11/get-post/</link>
      <pubDate>Sun, 11 Jul 2021 22:29:30 +0800</pubDate>
      
      <guid>https://sonemiyuki.cn/post/2021/07/11/get-post/</guid>
      <description>1. 操作系统概述  执行指令：Fetch -&amp;gt; Execute  四种中断：
 程序中断：由程序执行结果产生（溢出，除以零，非法机器指令，访问不合法/无权限内存） 时钟中断：处理器内部的计时器产生，允许操作系统以一定的规则执行函数 IO中断：由IO控制器产生，用于发信号通知操作是否正常完成及其错无条件 硬件失效中断：硬件故障产生的中断  IO中断
 无中断：在写的时候直接写 短IO等待时间：处理器和IO并行，用中断处理器进程的方式处理IO的结束 长IO等待时间：等到下一个进程开始的时候对上一个进程的IO收尾，开始下一个IO的准备  中断执行
 本质上是栈的思想和应用  设备控制器或者其他系统硬件产生一个中断 处理器结束指令执行 处理器发送中断应答信号 PSW，PC入栈 根据中断加载新的PC值 保存剩余的处理状态信息 处理终端 恢复状态信息 恢复PSW，PC    多中断
 嵌套中断（优先级） 顺序中断（默认）  存储器的三大要素两两关系
 存储时间 位价格 总容量  速度降低，时间变高，价格降低，容量变大
 寄存器 Cache 内存 磁盘 磁带  设计Cache需要考虑的因素
 存储器大小 块的大小 mapping函数 替换算法 写策略 缓存级数  DMA
 可编程IO操作：需要程序员监控检查，耗费资源 中断驱动IO操作：IO准备好之后会对处理器进行中断，每个字都要通过处理器 DMA操作：DMA模块直接和存储器操作，传输整个数据块，传输完成产生中断  停止访存、周期挪用、交替访存    习题：</description>
    </item>
    
    <item>
      <title>Jmeter(1)</title>
      <link>https://sonemiyuki.cn/post/2021/07/11/get-post/</link>
      <pubDate>Sun, 11 Jul 2021 11:29:30 +0800</pubDate>
      
      <guid>https://sonemiyuki.cn/post/2021/07/11/get-post/</guid>
      <description>Jmeter Jmeter脚本生成
 借助第三方工具录制  badboy 被淘汰 blazemeter 大陆无法注册账号   使用自带的http代理服务器方式生成  添加线程&amp;ndash;线程组 添加配置元件&amp;ndash;cookie管理器 添加非测试元件&amp;ndash;http代理服务器 配置http代理服务器并启动  端口：用户指定，和服务器无关 目标控制器： Type：有时候需要选Java   在客户端进行设置，使客户端请求通过代理。  Internet选项-连接-局域网设置     抓包手写  Jmeter代理服务器
 转发 翻译  </description>
    </item>
    
    <item>
      <title>性能测试Note（3）</title>
      <link>https://sonemiyuki.cn/post/2021/07/10/network/</link>
      <pubDate>Sat, 10 Jul 2021 16:54:30 +0800</pubDate>
      
      <guid>https://sonemiyuki.cn/post/2021/07/10/network/</guid>
      <description>基于LoadRunner的性能测试Note（3） 一小时内6000个用户开户
用lr事务手测单个用户时间，假设单次15s 一个小时一个vuser可以完成240个用户开户 6000/240=25，可用25个vuser模拟一小时内的6000个开户操作
unique number start 1 block 240*1.2=288 7200个testcase 确定需求，分析约束，准备数据。
关联-参数化-检查点
参数化：客户端提交给服务端的参数 关联：服务端返回给客户端的参数
订购机票 open_index submit_login info_flight find_flight select_flight pay_flight sign_off
账户参数化：username, usersession做关联
出发和到达的城市需要随机化，随机某个具体航班
web_reg_save_param(&amp;ldquo;fligts&amp;rdquo;, &amp;ldquo;LB=&amp;quot;&amp;gt;&amp;rdquo;, &amp;ldquo;RB=&amp;rdquo;,&amp;ldquo;ORD=All&amp;rdquo;,LAST); 根据业务适当去重 strcmp
吞吐量，响应时间，系统资源&amp;hellip;&amp;hellip;
结果分析：根据Analysis进行结果分析</description>
    </item>
    
    <item>
      <title>性能测试Note（2）</title>
      <link>https://sonemiyuki.cn/post/2021/07/09/network/</link>
      <pubDate>Fri, 09 Jul 2021 22:54:30 +0800</pubDate>
      
      <guid>https://sonemiyuki.cn/post/2021/07/09/network/</guid>
      <description>基于LoadRunner的性能测试Note（2） LR脚本开发 性能测试可以并发，效率高一点
构造200个账号
 数据库写（存储过程） 自动化工具构造 LR参数化构造  50 account: var: username const: password
方法1： VuserGenerator 业务过程分解 open_index into_register submit_register
分析可能存在的关键因素 username需要变量化处理 username，少的用excel拖一下，多的用脚本构造
自动化： 选择协议（create script支持协议探测）一般B/S用HTTP，C/S用Socket
参数化： ctrl+L Paramlist里面new一个username 参数类型file，将excel里的数据做成username.dat;第一行username，下面各行为数据 select column byname=username
然后开始录制，录制之后选择脚本中自己输入的username右键参数取代，选择username
C与LR：
编程需要编写脚本
action：本质是函数包， vuser_init.c Action.c vuser_end.c 每个action是一组功能的集合
记得return 0;
lr_output_massage()输出到LR控制台
F4：运行时设置
Controller加载脚本
Start Scenario
另一种参数化思路： 用Unique Number -&amp;gt; %3d转化出数字，用t{username}这样的参数化强行拼接
不同参数同一个数据源： 按name选，注意same line as&amp;hellip;
Data Wizard:基于ODBC的驱动
LR参数化： Select next row
 sequencial: 默认的，顺序化 random: 随机化 unique：唯一向下 same line as &amp;hellip;：取决于其他列  对于单用户来说，顺序和唯一取值序列是相同的</description>
    </item>
    
    <item>
      <title>性能测试Note（1）</title>
      <link>https://sonemiyuki.cn/post/2021/07/09/network/</link>
      <pubDate>Fri, 09 Jul 2021 20:54:30 +0800</pubDate>
      
      <guid>https://sonemiyuki.cn/post/2021/07/09/network/</guid>
      <description>基于LoadRunner的性能测试Note（1） 重视场景
效率： 资源使用情况，消耗的时间达到均衡
基准测试，不追求极限 单元和集成也可以渗透性能测试
接口测试重要性上升，组件化
性能测试没办法人工模拟
并发数：单位时间内对服务端发送请求的数量
业务数量：单位时间内的业务数量
并发数：柜员 业务数：顾客数
单交易基准，单交易负载，单交易压力，综合交易，综合负载，稳定性。
响应时间：服务端，用户端。网络传输时间不可控，性能测试一般在局域网中进行，多点千兆/百兆
在线用户、有效用户
业务分析和理解
 业务对象规模  注册用户 在线用户 日交易量 峰值交易量 峰值交易时间 峰值并发数   测试点  注册 登录 订票 查询    LR：WebTour
VUGenerator： 登录业务，三个功能点， 打开首页 输入用户名密码提交登陆 退出
对业务分解-创建三个动作 open_index submit_login sign_off
先切换动作再进行录制
录制完修改thinktime并且进行回放 显示script-pass的页面选择view之后expand-all查看所有报告 脚本顺利执行不代表业务是对的
注意重复登录有可能使用了不正确的session值或者jwt之类的验证token
业务全对的时间才有意义
日均200wPV 200w80%=160w 高峰用户数量 24h20%=4.8h 高峰用户时间 单次访问页面2秒 2-5-8 4.8*3600/2
弄清楚考察并发数还是业务量。
新需求： 5min内200次用户注册，响应时间不超过3s成功率100%，CPU内存使用率均不超过70%
单次注册消耗时间,基于行为测试： 一次10.86s 560/10.86=27 200/27=8个VUser 278=216testcase 经验定律：*1.2 260个testcase</description>
    </item>
    
    <item>
      <title>计算机网络面经与常见QA（1）</title>
      <link>https://sonemiyuki.cn/post/2021/07/08/network/</link>
      <pubDate>Thu, 08 Jul 2021 23:41:30 +0800</pubDate>
      
      <guid>https://sonemiyuki.cn/post/2021/07/08/network/</guid>
      <description>计算机网络面经与常见QA（1）  5层协议、7层协议、4层协议与主要协议   7层协议：  应用层：FTP、DNS、SMTP、HTTP、WWW、NFS 表示层：JPEG、MPEG、ASII 会话层：RPC、SQL、NFS 传输层：TCP、UDP 网络层：IP、ACMP、ARP、RARP、OSPF、IPX、RIP 链路层：PPP、MAC、VLAN 物理层：RJ45、CLOCK、IEEE802.3   5层协议：  将7层协议的顶部三层合并为应用层   4层协议:  将底下两层合并为数据接口层    IP地址的分类   A类:以0开头,第一个字节为0-127 B类:以10开头,第一个字节为128-191 C类:以110开头,第一个字节为192-223 D类:以1110开头,用于多播 E类:以1111开头,暂时保留 特殊IP地址:  0.0.0.0 缺省路由,表示不清楚的主机和目的网络 255.255.255.255 路由器不转发的内网广播 127.0.0.1 localhost,本机 224.0.0.1 组播地址 192.168.X.X 私有地址     IP地址,子网掩码,主机号码的关系
  ARP(Address Resolution Protrol)地址解析协议
  概述：根据IP协议获取物理地址的TCP/IP协议
 在主机中维护ARP cache，里面有本局域网的主机和路由器的（ip地址，硬件地址）映射表。 当主机A向局域网上的另外一台主机B发送IP数据报的时候，在其ARP高速缓存里面查询有无主机B的IP地址  若有，查出硬件地址并且写入mac帧，通过局域网将帧发往该硬件地址。 若无，则主机A运行ARP，根据以下步骤找出主机B的硬件地址：  ARP进程向局域网内广播发送ARP请求分组，局域网内所有主机运行的ARP进程均收到此分组。在这里是广播 主机B的IP地址和ARP请求分组待查的IP一直，收下这个ARP请求分组，并且向A发送ARP响应分组，在这个响应分组中写进自己的硬件地址。在这里是单播。 主机A在收到ARP响应分组之后在其ARP cache中写入主机B的（IP地址，物理地址映射）     ARP的特点：  每个数据项都有生存时间 解决的主要是局域网上的问题 广域网上联系需要交给路由器转发    各种需要了解的小协议   ICMP（Internet Control Message Protrol）  主要用于IP主机和路由器之间传递控制信息 类型-代码-校验和  3-终点不可达：不能交付数据包 11-时间超过：路由器接收到生存时间为0的数据报，丢弃并向原点发送报文 12-参数问题：路由器或者主机收到的数据包首部有的字段的值不正确 5-改变路由：提示主机进行重定向 8、0-回送或回答：ICMP回送请求报文由主机或者路由器向特定的主机发布询问 13、14-时间戳请求或回答：用于校正时间戳     FTP（File Transfer Protrol）文件传输协议  文件传输协议 主动模式：  控制连接：会话期间一直打开，用于控制和会话，端口号21 数据连接：用来传输数据，服务机端口号20，客户机端口号自行开放，发送PORT命令从服务器获取数据   被动模式：  控制连接：会话期间一直打开，用于控制和会话，端口号21 数据连接：用来传输数据，服务器随机开放端口，客户端再连接到服务器开放的端口进行数据传输   主动模式和被动模式的不同简单概述为： 主动模式传送数据时是“服务器”连接到“客户端”的端口；被动模式传送数据是“客户端”连接到“服务器”的端口。主动模式需要客户端必须开放端口给服务器，很多客户端都是在防火墙内，开放端口给FTP服务器访问比较困难。被动模式只需要服务器端开放端口给客户端连接就行了。   HTTP（Hyper Text Transfer Protocol）超文本传输协议  Port: 80 运用TCP保证了数据的可靠运输，但是HTTP本身没有连接，没有状态。 文件传输时间+2RTT HTTP1.</description>
    </item>
    
    <item>
      <title>GET与POST探秘</title>
      <link>https://sonemiyuki.cn/post/2021/05/09/get-post/</link>
      <pubDate>Sun, 09 May 2021 22:29:30 +0800</pubDate>
      
      <guid>https://sonemiyuki.cn/post/2021/05/09/get-post/</guid>
      <description>从HTTP GET和POST的整理生发出来的 幂等性(Idempotence)
 Methods can also have the property of &amp;ldquo;idempotence&amp;rdquo; in that (aside from error or expiration issues) the side-effects of N &amp;gt; 0 identical requests is the same as for a single request.
 幂等性在HTTP1.1中的定义如上，可以大致理解为一次和多次请求某一个资源应该具有同样的副作用。 这是一个语义范畴的概念，换言之主要是由设计API、协议或者应用的人去保证的。幂等性是分布式系统设计中十分重要的概念，而HTTP的分布式本质也决定了它在HTTP中具有重要地位。
毋庸置疑，HTTP在当前的分布式系统中有重要的地位，幂等性也融入了设计理念之中。让我们考虑一个例子来说明幂等性在实际业务中的作用。 我们假设有如下函数帮助模拟业务：从某个id为account_id的账户里面扣数量为amount的钱。
bool withdraw(account_id, amount)在一个分布式系统里面，如果单纯用HTTP协议，我们不能很显然地假定系统的可靠性，那么，这时候我们假设A让B去扣钱，有可能产生几种情况：
 A说：B，请去某账户扣钱。 B完成了指令。 B对A说：我扣完了，返回你一个True，A收到了。 A说：B，请去某账户扣钱。 B完成了指令。 B对A说：由于余额等原因无法扣款，返回你一个False，A收到了。 事情往往不尽如人意，因为消息传递出现了两次，如果丢包了，有可能出现以下情况：   A说：B，请去某账户扣钱。 B没听到。 A说：B，请去某账户扣钱。 B完成了指令。B对A说：我扣完了，返回你一个True，A没收到 A说：B，请去某账户扣钱。 B完成了指令。B对A说：由于余额等原因无法扣款，返回你一个False，A没收到  从A的角度来看，如果迟迟没有收到Reply，有可能出现这三种情况之一，但是在目前设计下A无法通过已有的信息进行判断是三种情况的哪一种，也就无法确定是要叫B重新付款，还是返回付款成功，或者返回付款失败。
我们可以引进中间件完成这个业务，但是这在架构上会增加和中间件的耦合程度。从设计的角度说，有一种被称作幂等设计的设计思路被用来解决类似的问题。
int create_ticket() bool idempotent_withdraw(ticket_id, account_id, amount)A对B说，我要找你有一件事。B说，好的，你找我的事情我编号为5。A说，好的，5号事情是如此如此。B办完了，对A说，办完了。A返回。 在这样一个过程中，取号的过程损失很小，如果取号过程丢包了，只要重新取一个号码就可以了。但是当A收到取回的号码，这时候B就知道有一件事情要办。在这个假设下，B最多只会把这件特定的事情办一次成为AB之间的Common Sense。如果丢包导致A没有返回，A可以在调用上加上原来的ID，并且持续发送，因为B只会把这件事情办一次，所以可以持续发送，等待返回。</description>
    </item>
    
    <item>
      <title>Python 3单元测试unittest及HTML报告生成速成</title>
      <link>https://sonemiyuki.cn/post/2021/05/06/py3unittest/</link>
      <pubDate>Thu, 06 May 2021 10:54:24 +0800</pubDate>
      
      <guid>https://sonemiyuki.cn/post/2021/05/06/py3unittest/</guid>
      <description>Python3单元测试unittest及HTML报告生成速成 前置知识：
 Python面向对象基本 单元测试基本知识 Junit等其他测试框架关于测试类、测试方法、测试套件等基本构件的知识  我们先定义一个待测试的类和对象 code.py
class algor: def add(a, b): return a + b 然后开一个测试文件
from code import algor import unittest # 下述文件是从py2拿过来的，需要改造。改造方法在后面 import HTMLTestRunner 编写测试类：
class TestAlgor1(unittest.TestCase): @classmethod # 类前执行 def setUpClass(self): print(&amp;#34;setUpClass&amp;#34;) # 类后执行 @classmethod def tearDownClass(self): print(&amp;#34;tearDownClass&amp;#34;) # 方法前执行 def setUp(self): print(&amp;#34;setUp&amp;#34;) # 方法后执行 def tearDown(self): print(&amp;#34;tearDown&amp;#34;) # 测试方法，一般命名为测试某某某类 def testAdd1(self): self.assertEquals(algor.add(1, 3), 4) def testAdd2(self): self.assertEquals(algor.add(114, 514), 628) 主函数：构建测试套件和生成报告：
if __name__ == &amp;#39;__main__&amp;#39;: suite = unittest.</description>
    </item>
    
  </channel>
</rss>
